generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


enum UserRole {
  INDIVIDUAL
  ADMIN
  CURATOR
}

enum ProjectTagStatus {
  PUBLISHED
  IN_REVIEW
  DRAFT
  COMPLETED
  ONGOING
}

model User {
  id                String         @id @default(uuid())
  googleId          String         @unique
  name              String
  bio               String?
  email             String         @unique
  githubUsername    String         @unique
  githubProfileUrl  String?
  githubAvatarUrl   String?
  role              UserRole       @default(INDIVIDUAL) 
  rank              Int            @default(0)
  joinDate          DateTime       @default(now())
  projects          ProjectUser[]
  projectTags       ProjectTag[]   
}

model Project {
  id                String               @id @default(uuid())
  name              String
  description       String?
  problemStatement  String?              
  githubUrl         String?               @unique
  demoUrl           String?              
  techStack         String[]
  imageUrl          String?
  status            String               
  projectType       String               
  keyFeatures       String[]                        
  projectImages     ProjectImage[]       
  resources         ProjectResource[]
  users             ProjectUser[]
  pendingUsers      PendingProjectUser[]
  tags              ProjectTag[]         
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model ProjectTag {
  id          String           @id @default(uuid())
  name        String
  title       String?          
  status      ProjectTagStatus?
  conference  String?   
  date        DateTime? 
  competition String?   
  project     Project          @relation(fields: [projectId], references: [id])
  projectId   String
  curator     User             @relation(fields: [curatorId], references: [id])
  curatorId   String
  createdAt   DateTime         @default(now())

  @@unique([projectId, name])
  @@index([curatorId])
}
model ProjectUser {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  role      String
  
  @@unique([userId, projectId])
}

model PendingProjectUser {
  id              String   @id @default(uuid())
  githubUsername  String
  project         Project  @relation(fields: [projectId], references: [id])
  projectId       String
  role            String

  @@unique([githubUsername, projectId])
}

model ProjectImage {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}

model ProjectResource {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  type        String   // 'image' | 'document' | 'presentation' | 'paper' | 'other'
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}
